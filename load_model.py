#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 15 15:27:08 2021.

@author: Tom
"""
from keras.models import load_model
import keras.backend as K
import datetime
import numpy as np
import h5py

def dice_coef(y_true, y_pred, smooth = 1.0):
    """Compute Dice Similarity Coefficient (DSC).
        
    Parameters
    ----------
    y_true : np.ndarray
        1D array of correct/ground truth labels
    y_pred : np.ndarray
        1D Array of predicted labels generated by U-Net
    smooth : float
        Defaults to 1.0
    
    Returns
    -------
    Returns the DSC
    
    Additional Notes
    -------
    Original source code can be found `here <https://github.com/jocicmarko/ultrasound-nerve-segmentation/blob/master/train.py>`_
    """
    flat_truth = K.flatten(y_true)
    flat_prediction = K.flatten(y_pred)
    intersection = K.sum(flat_truth * flat_prediction)
    numerator = 2 * intersection + smooth
    sum_truth = K.sum(flat_truth)
    sum_prediction = K.sum(flat_prediction)
    denominator = sum_truth + sum_prediction + smooth
    dice = numerator / denominator
    return dice

def dice_coef_loss(y_true, y_pred):
    """Dice Similarity Coefficient (DSC) loss function.
    
    Parameters
    ----------
    y_true : np.ndarray
        1D Array of correct/ground truth labels
    y_pred : np.ndarray
        1D Array of predicted labels generated by U-Net
    
    Returns
    -------
    Returns the DSC loss
    
    """
    return -dice_coef(y_true, y_pred)

def load_and_predict(ModelPath, testingHDF5, predFileName):
    """Load U-Net model and predict on a dataset.
    
    Parameters
    ----------
    ModelPath : string
        Filepath to saved FCN model
    testingHDF5 : string
        Filepath to dataset
    predFileName: string
        HDf5 file to which predictions will be saved
    
    Returns
    -------
    Returns nothing but saves predictions as HDF5 file
    
    """
    loaded_model = load_model(ModelPath, custom_objects={'dice_coef': dice_coef,'dice_coef_loss': dice_coef_loss})
    with h5py.File(testingHDF5, 'r') as f:
        X_test = f['testing_Images'][()]
        test_imag_fileanmes = f['testing_image_filenames'][()]
    
    uh_preds = loaded_model.predict(X_test, verbose=1)
    uh_preds_np = np.array(uh_preds)
    print ("Shape of UH predictions: " + str(uh_preds_np.shape))

    hd5f_file = h5py.File(datetime.datetime.today().strftime('%Y-%m-%d')+' ' + predFileName, mode='w')
    hd5f_file.create_dataset('UH_Predictions', data = uh_preds_np)
    hd5f_file.create_dataset('Prediction_Names', data = test_imag_fileanmes)
    hd5f_file.close()

